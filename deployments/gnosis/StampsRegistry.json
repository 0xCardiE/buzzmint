{
  "address": "0x5EBfBeFB1E88391eFb022d5d33302f50a46bF4f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swarmContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNormalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "BatchDepthIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        }
      ],
      "name": "BatchMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupAmountPerChunk",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "BatchTopUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SwarmContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BZZ_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "batchPayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "createBatchRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "getBatchPayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerBatchCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerBatches",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "batchId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalisedBalance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "bucketDepth",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "immutable_",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct StampsRegistry.BatchInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_newDepth",
          "type": "uint8"
        }
      ],
      "name": "increaseBatchDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "migrateBatchRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerBatches",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swarmStampContract",
      "outputs": [
        {
          "internalType": "contract ISwarmContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_topupAmountPerChunk",
          "type": "uint256"
        }
      ],
      "name": "topUpBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSwarmContractAddress",
          "type": "address"
        }
      ],
      "name": "updateSwarmContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x412f2782c4206af46857dc2067dc26d762263b35d7cc1715fb14d23987f0710d",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0x5EBfBeFB1E88391eFb022d5d33302f50a46bF4f3",
    "transactionIndex": 2,
    "gasUsed": "1525152",
    "logsBloom": "0x
    "blockHash": "0x16bd4862b888f5d65e4d14a4dfcccc2c3ca1881d39f2c56f22d37b1eb21a5676",
    "transactionHash": "0x412f2782c4206af46857dc2067dc26d762263b35d7cc1715fb14d23987f0710d",
    "logs": [],
    "blockNumber": 39963208,
    "cumulativeGasUsed": "1580442",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x45a1502382541Cd610CC9068e88727426b696293"
  ],
  "numDeployments": 3,
  "solcInputHash": "fb86502a3bd34e0627193b59f4ffc463",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swarmContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNormalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BatchDepthIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"}],\"name\":\"BatchMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupAmountPerChunk\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BatchTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SwarmContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BZZ_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"batchPayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"createBatchRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerBatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerBatches\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct StampsRegistry.BatchInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_newDepth\",\"type\":\"uint8\"}],\"name\":\"increaseBatchDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"migrateBatchRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swarmStampContract\",\"outputs\":[{\"internalType\":\"contract ISwarmContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_topupAmountPerChunk\",\"type\":\"uint256\"}],\"name\":\"topUpBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwarmContractAddress\",\"type\":\"address\"}],\"name\":\"updateSwarmContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)\":{\"params\":{\"_bucketDepth\":\"Bucket depth\",\"_depth\":\"Depth of the batch\",\"_immutable\":\"Whether the batch is immutable\",\"_initialBalancePerChunk\":\"Initial balance per chunk\",\"_nodeAddress\":\"Address of the node that will own the batch\",\"_nonce\":\"Unique nonce for the batch\",\"_owner\":\"Address that pays for the batch, but not the owner of the batch\"}},\"getBatchPayer(bytes32)\":{\"params\":{\"_batchId\":\"The ID of the batch\"},\"returns\":{\"_0\":\"The address of the payer\"}},\"getOwnerBatchCount(address)\":{\"params\":{\"_owner\":\"The address of the owner\"},\"returns\":{\"_0\":\"The number of batches\"}},\"getOwnerBatches(address)\":{\"params\":{\"_owner\":\"The address of the owner\"},\"returns\":{\"_0\":\"Array of BatchInfo for the owner\"}},\"increaseBatchDepth(bytes32,uint8)\":{\"params\":{\"_batchId\":\"The id of the batch to increase depth\",\"_newDepth\":\"The new depth for the batch (must be greater than current depth)\"}},\"migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)\":{\"params\":{\"_batchId\":\"Batch ID from the old contract\",\"_bucketDepth\":\"Bucket depth from the old batch\",\"_depth\":\"Depth from the old batch\",\"_immutable\":\"Immutable flag from the old batch\",\"_nodeAddress\":\"Node address from the old batch\",\"_normalisedBalance\":\"Normalised balance from the old batch\",\"_owner\":\"Address that owns the batch\",\"_timestamp\":\"Original timestamp from the old batch\",\"_totalAmount\":\"Total amount from the old batch\"}},\"topUpBatch(bytes32,uint256)\":{\"params\":{\"_batchId\":\"The id of the batch to top up\",\"_topupAmountPerChunk\":\"The amount of additional tokens to add per chunk\"}},\"transferAdmin(address)\":{\"params\":{\"_newAdmin\":\"The address of the new admin\"}},\"updateSwarmContract(address)\":{\"params\":{\"_newSwarmContractAddress\":\"New address of the swarm contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Creates a new batch and registers the payer\"},\"getBatchPayer(bytes32)\":{\"notice\":\"Get the payer address for a specific batch ID\"},\"getOwnerBatchCount(address)\":{\"notice\":\"Get the number of batches for a specific owner\"},\"getOwnerBatches(address)\":{\"notice\":\"Get all batches for a specific owner\"},\"increaseBatchDepth(bytes32,uint8)\":{\"notice\":\"Increase the depth of an existing batch\"},\"migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)\":{\"notice\":\"Migrate batch data from old contract without performing token transfers\"},\"topUpBatch(bytes32,uint256)\":{\"notice\":\"Top up an existing batch\"},\"transferAdmin(address)\":{\"notice\":\"Transfer admin rights to a new address\"},\"updateSwarmContract(address)\":{\"notice\":\"Updates the swarm contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StampsRegistry.sol\":\"StampsRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StampsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/*\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n                                              \\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d  \\n    \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\n    \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\n*/\\n\\n/**\\n * @title StampsRegistry\\n * @notice A registry for Swarm Postage Stamps\\n * @dev Note on naming convention: The terms \\\"Batch\\\" and \\\"Stamps\\\" are used interchangeably throughout the codebase.\\n *      \\\"Batch\\\" refers to a collection of stamps created in a single transaction and is the terminology used in the\\n *      Swarm protocol. \\\"Stamps\\\" is a more user-friendly term used to describe the same concept.\\n *      For example: \\\"BatchCreated\\\" event, but \\\"StampsRegistry\\\" contract.\\n */\\n\\ninterface ISwarmContract {\\n    function createBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external;\\n\\n    function topUp(bytes32 _batchId, uint256 _topupAmountPerChunk) external;\\n    \\n    function increaseDepth(bytes32 _batchId, uint8 _newDepth) external;\\n\\n    function currentTotalOutPayment() external view returns (uint256);\\n    \\n    function remainingBalance(bytes32 _batchId) external view returns (uint256);\\n    \\n    function batchOwner(bytes32 _batchId) external view returns (address);\\n    \\n    function batchDepth(bytes32 _batchId) external view returns (uint8);\\n    \\n    function batchBucketDepth(bytes32 _batchId) external view returns (uint8);\\n    \\n    function batchImmutableFlag(bytes32 _batchId) external view returns (bool);\\n    \\n    function batchNormalisedBalance(bytes32 _batchId) external view returns (uint256);\\n    \\n    function batchLastUpdatedBlockNumber(bytes32 _batchId) external view returns (uint256);\\n}\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ncontract StampsRegistry {\\n    // State variables\\n    ISwarmContract public swarmStampContract;\\n    IERC20 public constant BZZ_TOKEN =\\n        IERC20(0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da);\\n    mapping(bytes32 => address) public batchPayers;\\n    address public admin;\\n    \\n    // New data structure to store batch information by owner\\n    struct BatchInfo {\\n        bytes32 batchId;\\n        uint256 totalAmount;\\n        uint256 normalisedBalance;\\n        address nodeAddress;\\n        address payer;\\n        uint8 depth;\\n        uint8 bucketDepth;\\n        bool immutable_;\\n        uint256 timestamp;\\n    }\\n    \\n    // Mapping from owner address to array of BatchInfo\\n    mapping(address => BatchInfo[]) public ownerBatches;\\n    \\n    // Events\\n    event BatchCreated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address indexed owner,\\n        address indexed payer,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutable_\\n    );\\n\\n    event BatchTopUp(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 topupAmountPerChunk,\\n        address indexed owner\\n    );\\n\\n    event BatchDepthIncrease(\\n        bytes32 indexed batchId,\\n        uint8 newDepth,\\n        uint256 newNormalisedBalance,\\n        address indexed owner\\n    );\\n\\n    event BatchMigrated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address indexed owner,\\n        address indexed payer,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutable_\\n    );\\n    event SwarmContractUpdated(address oldAddress, address newAddress);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    // Custom errors\\n    error TransferFailed();\\n    error ApprovalFailed();\\n\\n    // Modifiers\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(address _swarmContractAddress) {\\n        swarmStampContract = ISwarmContract(_swarmContractAddress);\\n        admin = msg.sender;\\n    }\\n\\n    ////////////////////////////////////////\\n    //              SETTERS               //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Transfer admin rights to a new address\\n     * @param _newAdmin The address of the new admin\\n     */\\n    function transferAdmin(address _newAdmin) external onlyAdmin {\\n        require(_newAdmin != address(0), \\\"New admin cannot be the zero address\\\");\\n        address oldAdmin = admin;\\n        admin = _newAdmin;\\n        emit AdminTransferred(oldAdmin, _newAdmin);\\n    }\\n\\n    /**\\n     * @notice Updates the swarm contract address\\n     * @param _newSwarmContractAddress New address of the swarm contract\\n     */\\n    function updateSwarmContract(\\n        address _newSwarmContractAddress\\n    ) external onlyAdmin {\\n        address oldAddress = address(swarmStampContract);\\n        swarmStampContract = ISwarmContract(_newSwarmContractAddress);\\n        emit SwarmContractUpdated(oldAddress, _newSwarmContractAddress);\\n    }\\n\\n    /**\\n     * @notice Migrate batch data from old contract without performing token transfers\\n     * @param _owner Address that owns the batch\\n     * @param _batchId Batch ID from the old contract\\n     * @param _totalAmount Total amount from the old batch\\n     * @param _normalisedBalance Normalised balance from the old batch\\n     * @param _nodeAddress Node address from the old batch\\n     * @param _depth Depth from the old batch\\n     * @param _bucketDepth Bucket depth from the old batch\\n     * @param _immutable Immutable flag from the old batch\\n     * @param _timestamp Original timestamp from the old batch\\n     */\\n    function migrateBatchRegistry(\\n        address _owner,\\n        bytes32 _batchId,\\n        uint256 _totalAmount,\\n        uint256 _normalisedBalance,\\n        address _nodeAddress,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bool _immutable,\\n        uint256 _timestamp\\n    ) external onlyAdmin {\\n        // Store the payer information\\n        batchPayers[_batchId] = _owner;\\n            \\n        // Store batch information in the owner's batches array\\n        ownerBatches[_owner].push(BatchInfo({\\n            batchId: _batchId,\\n            totalAmount: _totalAmount,\\n            normalisedBalance: _normalisedBalance,\\n            nodeAddress: _nodeAddress,\\n            payer: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutable_: _immutable,\\n            timestamp: _timestamp\\n        }));\\n\\n        // Emit the batch migration event\\n        emit BatchMigrated(\\n            _batchId,\\n            _totalAmount,\\n            _normalisedBalance,\\n            _nodeAddress,\\n            _owner,\\n            _depth,\\n            _bucketDepth,\\n            _immutable\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new batch and registers the payer\\n     * @param _owner Address that pays for the batch, but not the owner of the batch\\n     * @param _nodeAddress Address of the node that will own the batch\\n     * @param _initialBalancePerChunk Initial balance per chunk\\n     * @param _depth Depth of the batch\\n     * @param _bucketDepth Bucket depth\\n     * @param _nonce Unique nonce for the batch\\n     * @param _immutable Whether the batch is immutable\\n     */\\n    function createBatchRegistry(\\n        address _owner,\\n        address _nodeAddress,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external {\\n        // Calculate total amount\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n\\n        // Transfer BZZ tokens from sender to this contract\\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        // Approve swarmStampContract to spend the BZZ tokens\\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\\n            revert ApprovalFailed();\\n        }\\n\\n        // Call the original swarm contract with nodeAddress as owner\\n        swarmStampContract.createBatch(\\n            _nodeAddress,\\n            _initialBalancePerChunk,\\n            _depth,\\n            _bucketDepth,\\n            _nonce,\\n            _immutable\\n        );\\n\\n        // Calculate batchId as bytes32\\n        bytes32 batchId = keccak256(abi.encode(address(this), _nonce));\\n\\n        // Store the payer information\\n        batchPayers[batchId] = _owner;\\n\\n        // Get normalized balance\\n        uint256 normalisedBalance = swarmStampContract\\n            .currentTotalOutPayment() + _initialBalancePerChunk;\\n            \\n        // Store batch information in the owner's batches array\\n        ownerBatches[_owner].push(BatchInfo({\\n            batchId: batchId,\\n            totalAmount: totalAmount,\\n            normalisedBalance: normalisedBalance,\\n            nodeAddress: _nodeAddress,\\n            payer: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutable_: _immutable,\\n            timestamp: block.timestamp\\n        }));\\n\\n        // Emit the batch creation event\\n        emit BatchCreated(\\n            batchId,\\n            totalAmount,\\n            normalisedBalance,\\n            _nodeAddress,\\n            _owner,\\n            _depth,\\n            _bucketDepth,\\n            _immutable\\n        );\\n    }\\n\\n    /**\\n     * @notice Top up an existing batch\\n     * @param _batchId The id of the batch to top up\\n     * @param _topupAmountPerChunk The amount of additional tokens to add per chunk\\n     */\\n    function topUpBatch(\\n        bytes32 _batchId,\\n        uint256 _topupAmountPerChunk\\n    ) external {\\n        // Find the batch info in owner's batches\\n        address owner = batchPayers[_batchId];\\n        require(owner != address(0), \\\"Batch does not exist in registry\\\");\\n        \\n        // Find the batch to get its depth for total amount calculation\\n        uint8 depth;\\n        uint256 currentNormalisedBalance;\\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\\n            if (ownerBatches[owner][i].batchId == _batchId) {\\n                depth = ownerBatches[owner][i].depth;\\n                currentNormalisedBalance = ownerBatches[owner][i].normalisedBalance;\\n                break;\\n            }\\n        }\\n        \\n        // Calculate total amount to be topped up\\n        uint256 totalAmount = _topupAmountPerChunk * (1 << depth);\\n        \\n        // Transfer BZZ tokens from sender to this contract\\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n        \\n        // Approve swarmStampContract to spend the BZZ tokens\\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\\n            revert ApprovalFailed();\\n        }\\n        \\n        // Call the topUp function on the swarm contract\\n        swarmStampContract.topUp(_batchId, _topupAmountPerChunk);\\n        \\n        // Update the batch info in the registry\\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\\n            if (ownerBatches[owner][i].batchId == _batchId) {\\n                ownerBatches[owner][i].normalisedBalance = currentNormalisedBalance + _topupAmountPerChunk;\\n                break;\\n            }\\n        }\\n        \\n        // Emit the batch top up event\\n        emit BatchTopUp(\\n            _batchId,\\n            totalAmount,\\n            _topupAmountPerChunk,\\n            owner\\n        );\\n    }\\n\\n    /**\\n     * @notice Increase the depth of an existing batch\\n     * @param _batchId The id of the batch to increase depth\\n     * @param _newDepth The new depth for the batch (must be greater than current depth)\\n     */\\n    function increaseBatchDepth(bytes32 _batchId, uint8 _newDepth) external {\\n        // Find the batch info in owner's batches\\n        address owner = batchPayers[_batchId];\\n        require(owner != address(0), \\\"Batch does not exist in registry\\\");\\n        \\n        // Verify that msg.sender is the owner of the batch in the registry\\n        require(owner == msg.sender, \\\"Only the batch owner can increase depth\\\");\\n        \\n        // Find the batch to get its current depth and index\\n        uint8 currentDepth;\\n        uint256 batchIndex;\\n        bool foundBatch = false;\\n        \\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\\n            if (ownerBatches[owner][i].batchId == _batchId) {\\n                currentDepth = ownerBatches[owner][i].depth;\\n                batchIndex = i;\\n                foundBatch = true;\\n                break;\\n            }\\n        }\\n        \\n        require(foundBatch, \\\"Batch not found in owner's batches\\\");\\n        require(_newDepth > currentDepth, \\\"New depth must be greater than current depth\\\");\\n        \\n        // Call increaseDepth on the swarm contract\\n        swarmStampContract.increaseDepth(_batchId, _newDepth);\\n        \\n        // Get the updated values directly from the swarm contract\\n        uint8 updatedDepth = swarmStampContract.batchDepth(_batchId);\\n        uint256 newNormalisedBalance = swarmStampContract.batchNormalisedBalance(_batchId);\\n        \\n        // Update the batch in registry with values from the swarm contract\\n        ownerBatches[owner][batchIndex].depth = updatedDepth;\\n        ownerBatches[owner][batchIndex].normalisedBalance = newNormalisedBalance;\\n        \\n        // Emit batch depth increase event\\n        emit BatchDepthIncrease(\\n            _batchId,\\n            updatedDepth,\\n            newNormalisedBalance,\\n            owner\\n        );\\n    }\\n\\n    ////////////////////////////////////////\\n    //              GETTERS               //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Get the payer address for a specific batch ID\\n     * @param _batchId The ID of the batch\\n     * @return The address of the payer\\n     */\\n    function getBatchPayer(bytes32 _batchId) external view returns (address) {\\n        return batchPayers[_batchId];\\n    }\\n    \\n    /**\\n     * @notice Get all batches for a specific owner\\n     * @param _owner The address of the owner\\n     * @return Array of BatchInfo for the owner\\n     */\\n    function getOwnerBatches(address _owner) external view returns (BatchInfo[] memory) {\\n        return ownerBatches[_owner];\\n    }\\n    \\n    /**\\n     * @notice Get the number of batches for a specific owner\\n     * @param _owner The address of the owner\\n     * @return The number of batches\\n     */\\n    function getOwnerBatchCount(address _owner) external view returns (uint256) {\\n        return ownerBatches[_owner].length;\\n    }\\n}\\n\",\"keccak256\":\"0x356301465c494b89d047649a319304e7559c5f5ba5f3bc3f273a80460d8ee918\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611a64380380611a6483398101604081905261002f9161005d565b600080546001600160a01b039092166001600160a01b0319928316179055600280549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b6119c88061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806375829def1161008c578063b009962011610066578063b00996201461025b578063e1e1edfc14610284578063f851a4401461029f578063fa031f84146102b257600080fd5b806375829def146102225780638831349414610235578063ae2688161461024857600080fd5b806335f7447b116100c857806335f7447b146101535780635e9b3ac114610194578063664031af146101fc57806368a26f9f1461020f57600080fd5b806315493619146100ef5780632ff190d614610104578063302fb0ca14610117575b600080fd5b6101026100fd3660046115e5565b6102d2565b005b610102610112366004611643565b610714565b6101406101253660046116c3565b6001600160a01b031660009081526003602052604090205490565b6040519081526020015b60405180910390f35b61017c6101613660046116e5565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b6101a76101a23660046116fe565b610bf1565b60408051998a5260208a0198909852968801959095526001600160a01b03938416606088015292909116608086015260ff90811660a08601521660c0840152151560e08301526101008201526101200161014a565b61010261020a366004611728565b610c75565b61010261021d366004611758565b611117565b6101026102303660046116c3565b61138a565b60005461017c906001600160a01b031681565b6101026102563660046116c3565b611478565b61017c6102693660046116e5565b6000908152600160205260409020546001600160a01b031690565b61017c73dbf3ea6f5bee45c02255b2c26a16f300502f68da81565b60025461017c906001600160a01b031681565b6102c56102c03660046116c3565b6114fc565b60405161014a91906117ec565b6000828152600160205260409020546001600160a01b03168061033c5760405162461bcd60e51b815260206004820181905260248201527f426174636820646f6573206e6f7420657869737420696e20726567697374727960448201526064015b60405180910390fd5b60008060005b6001600160a01b038416600090815260036020526040902054811015610448576001600160a01b038416600090815260036020526040902080548791908390811061038f5761038f6118a2565b90600052602060002090600602016000015403610440576001600160a01b03841660009081526003602052604090208054829081106103d0576103d06118a2565b906000526020600020906006020160040160149054906101000a900460ff16925060036000856001600160a01b03166001600160a01b031681526020019081526020016000208181548110610427576104276118a2565b9060005260206000209060060201600201549150610448565b600101610342565b50600061045b600160ff85161b866118ce565b6040516323b872dd60e01b81523360048201523060248201526044810182905290915073dbf3ea6f5bee45c02255b2c26a16f300502f68da906323b872dd906064016020604051808303816000875af11580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906118eb565b6104fd576040516312171d8360e31b815260040160405180910390fd5b60005460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9063095ea7b3906044016020604051808303816000875af1158015610562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058691906118eb565b6105a3576040516340b27c2160e11b815260040160405180910390fd5b60005460405163b67644b960e01b815260048101889052602481018790526001600160a01b039091169063b67644b990604401600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b5050505060005b6001600160a01b0385166000908152600360205260409020548110156106c5576001600160a01b0385166000908152600360205260409020805488919083908110610658576106586118a2565b906000526020600020906006020160000154036106bd576106798684611908565b6001600160a01b03861660009081526003602052604090208054839081106106a3576106a36118a2565b9060005260206000209060060201600201819055506106c5565b60010161060b565b5060408051828152602081018790526001600160a01b0386169188917fc5391d63190b7934cf128defb45873bc47a98ed41a70554734dae20fa16464f4910160405180910390a3505050505050565b6000610726600160ff87161b876118ce565b6040516323b872dd60e01b81523360048201523060248201526044810182905290915073dbf3ea6f5bee45c02255b2c26a16f300502f68da906323b872dd906064016020604051808303816000875af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906118eb565b6107c8576040516312171d8360e31b815260040160405180910390fd5b60005460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9063095ea7b3906044016020604051808303816000875af115801561082d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085191906118eb565b61086e576040516340b27c2160e11b815260040160405180910390fd5b600054604051635239af7160e01b81526001600160a01b0389811660048301526024820189905260ff8089166044840152871660648301526084820186905284151560a483015290911690635239af719060c401600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b505060408051306020820152908101869052600092506060019050604051602081830303815290604052805190602001209050886001600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008760008054906101000a90046001600160a01b03166001600160a01b03166351b17cd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d3919061191b565b6109dd9190611908565b9050600360008b6001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808481526020018581526020018381526020018b6001600160a01b031681526020018c6001600160a01b031681526020018960ff1681526020018860ff168152602001861515815260200142815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff021916908360ff16021790555060c08201518160040160156101000a81548160ff021916908360ff16021790555060e08201518160040160166101000a81548160ff02191690831515021790555061010082015181600501555050896001600160a01b0316896001600160a01b0316837fc56374a8e3361770343efe343883bf87efaeca24024afbba9062b88495f50f6e86858c8c8b604051610bdd959493929190948552602085019390935260ff91821660408501521660608301521515608082015260a00190565b60405180910390a450505050505050505050565b60036020528160005260406000208181548110610c0d57600080fd5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154939650919450926001600160a01b03918216929181169160ff600160a01b8304811692600160a81b8104821692600160b01b9091049091169089565b6000828152600160205260409020546001600160a01b031680610cda5760405162461bcd60e51b815260206004820181905260248201527f426174636820646f6573206e6f7420657869737420696e2072656769737472796044820152606401610333565b6001600160a01b0381163314610d425760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920746865206261746368206f776e65722063616e20696e63726561736044820152660ca40c8cae0e8d60cb1b6064820152608401610333565b6000806000805b6001600160a01b038516600090815260036020526040902054811015610e0c576001600160a01b0385166000908152600360205260409020805488919083908110610d9657610d966118a2565b90600052602060002090600602016000015403610e04576001600160a01b0385166000908152600360205260409020805482908110610dd757610dd76118a2565b906000526020600020906006020160040160149054906101000a900460ff16935080925060019150610e0c565b600101610d49565b5080610e655760405162461bcd60e51b815260206004820152602260248201527f4261746368206e6f7420666f756e6420696e206f776e65722773206261746368604482015261657360f01b6064820152608401610333565b8260ff168560ff1611610ecf5760405162461bcd60e51b815260206004820152602c60248201527f4e6577206465707468206d7573742062652067726561746572207468616e206360448201526b0eae4e4cadce840c8cae0e8d60a31b6064820152608401610333565b6000546040516347aab79b60e01b81526004810188905260ff871660248201526001600160a01b03909116906347aab79b90604401600060405180830381600087803b158015610f1e57600080fd5b505af1158015610f32573d6000803e3d6000fd5b50506000805460405163225f574760e11b8152600481018b90529193506001600160a01b031691506344beae8e90602401602060405180830381865afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611934565b6000805460405163df67438560e01b8152600481018b905292935090916001600160a01b039091169063df67438590602401602060405180830381865afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611017919061191b565b6001600160a01b03871660009081526003602052604090208054919250839186908110611046576110466118a2565b906000526020600020906006020160040160146101000a81548160ff021916908360ff1602179055508060036000886001600160a01b03166001600160a01b0316815260200190815260200160002085815481106110a6576110a66118a2565b906000526020600020906006020160020181905550856001600160a01b0316887ffdee0eecf77a3806c3c4424dcaa7d9c3ed2bed243cbcbe9f88696cb6639985c8848460405161110592919060ff929092168252602082015260400190565b60405180910390a35050505050505050565b6002546001600160a01b031633146111415760405162461bcd60e51b815260040161033390611951565b88600160008a815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600360008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808a8152602001898152602001888152602001876001600160a01b031681526020018b6001600160a01b031681526020018660ff1681526020018560ff168152602001841515815260200183815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff021916908360ff16021790555060c08201518160040160156101000a81548160ff021916908360ff16021790555060e08201518160040160166101000a81548160ff02191690831515021790555061010082015181600501555050886001600160a01b0316856001600160a01b0316897f048eb855e673d9441d2d3305af4e1feaf7c2e0805c372d702d88de09af80e1cb8a8a898989604051611377959493929190948552602085019390935260ff91821660408501521660608301521515608082015260a00190565b60405180910390a4505050505050505050565b6002546001600160a01b031633146113b45760405162461bcd60e51b815260040161033390611951565b6001600160a01b0381166114165760405162461bcd60e51b8152602060048201526024808201527f4e65772061646d696e2063616e6e6f7420626520746865207a65726f206164646044820152637265737360e01b6064820152608401610333565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec691015b60405180910390a15050565b6002546001600160a01b031633146114a25760405162461bcd60e51b815260040161033390611951565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f470ea4ad511ce9155b66f263468d8b2d8bb80ddc9d3fe333d69feea9b7bb496f910161146c565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b828210156115da576000848152602090819020604080516101208101825260068602909201805483526001808201548486015260028201549284019290925260038101546001600160a01b0390811660608501526004820154908116608085015260ff600160a01b8204811660a0860152600160a81b8204811660c0860152600160b01b90910416151560e0840152600501546101008301529083529092019101611534565b505050509050919050565b600080604083850312156115f857600080fd5b50508035926020909101359150565b80356001600160a01b038116811461161e57600080fd5b919050565b60ff8116811461163257600080fd5b50565b801515811461163257600080fd5b600080600080600080600060e0888a03121561165e57600080fd5b61166788611607565b965061167560208901611607565b955060408801359450606088013561168c81611623565b9350608088013561169c81611623565b925060a0880135915060c08801356116b381611635565b8091505092959891949750929550565b6000602082840312156116d557600080fd5b6116de82611607565b9392505050565b6000602082840312156116f757600080fd5b5035919050565b6000806040838503121561171157600080fd5b61171a83611607565b946020939093013593505050565b6000806040838503121561173b57600080fd5b82359150602083013561174d81611623565b809150509250929050565b60008060008060008060008060006101208a8c03121561177757600080fd5b6117808a611607565b985060208a0135975060408a0135965060608a013595506117a360808b01611607565b945060a08a01356117b381611623565b935060c08a01356117c381611623565b925060e08a01356117d381611635565b809250506101008a013590509295985092959850929598565b602080825282518282018190526000919060409081850190868401855b8281101561189557815180518552868101518786015285810151868601526060808201516001600160a01b03908116918701919091526080808301519091169086015260a08082015160ff9081169187019190915260c0808301519091169086015260e08082015115159086015261010090810151908501526101209093019290850190600101611809565b5091979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176118e5576118e56118b8565b92915050565b6000602082840312156118fd57600080fd5b81516116de81611635565b808201808211156118e5576118e56118b8565b60006020828403121561192d57600080fd5b5051919050565b60006020828403121561194657600080fd5b81516116de81611623565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b60608201526080019056fea2646970667358221220c21c40f5d7e975faf22efcccb9d368bf3fc2e71c6eb9f1a3ec4849b9a5fcaac664736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806375829def1161008c578063b009962011610066578063b00996201461025b578063e1e1edfc14610284578063f851a4401461029f578063fa031f84146102b257600080fd5b806375829def146102225780638831349414610235578063ae2688161461024857600080fd5b806335f7447b116100c857806335f7447b146101535780635e9b3ac114610194578063664031af146101fc57806368a26f9f1461020f57600080fd5b806315493619146100ef5780632ff190d614610104578063302fb0ca14610117575b600080fd5b6101026100fd3660046115e5565b6102d2565b005b610102610112366004611643565b610714565b6101406101253660046116c3565b6001600160a01b031660009081526003602052604090205490565b6040519081526020015b60405180910390f35b61017c6101613660046116e5565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b6101a76101a23660046116fe565b610bf1565b60408051998a5260208a0198909852968801959095526001600160a01b03938416606088015292909116608086015260ff90811660a08601521660c0840152151560e08301526101008201526101200161014a565b61010261020a366004611728565b610c75565b61010261021d366004611758565b611117565b6101026102303660046116c3565b61138a565b60005461017c906001600160a01b031681565b6101026102563660046116c3565b611478565b61017c6102693660046116e5565b6000908152600160205260409020546001600160a01b031690565b61017c73dbf3ea6f5bee45c02255b2c26a16f300502f68da81565b60025461017c906001600160a01b031681565b6102c56102c03660046116c3565b6114fc565b60405161014a91906117ec565b6000828152600160205260409020546001600160a01b03168061033c5760405162461bcd60e51b815260206004820181905260248201527f426174636820646f6573206e6f7420657869737420696e20726567697374727960448201526064015b60405180910390fd5b60008060005b6001600160a01b038416600090815260036020526040902054811015610448576001600160a01b038416600090815260036020526040902080548791908390811061038f5761038f6118a2565b90600052602060002090600602016000015403610440576001600160a01b03841660009081526003602052604090208054829081106103d0576103d06118a2565b906000526020600020906006020160040160149054906101000a900460ff16925060036000856001600160a01b03166001600160a01b031681526020019081526020016000208181548110610427576104276118a2565b9060005260206000209060060201600201549150610448565b600101610342565b50600061045b600160ff85161b866118ce565b6040516323b872dd60e01b81523360048201523060248201526044810182905290915073dbf3ea6f5bee45c02255b2c26a16f300502f68da906323b872dd906064016020604051808303816000875af11580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906118eb565b6104fd576040516312171d8360e31b815260040160405180910390fd5b60005460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9063095ea7b3906044016020604051808303816000875af1158015610562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058691906118eb565b6105a3576040516340b27c2160e11b815260040160405180910390fd5b60005460405163b67644b960e01b815260048101889052602481018790526001600160a01b039091169063b67644b990604401600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b5050505060005b6001600160a01b0385166000908152600360205260409020548110156106c5576001600160a01b0385166000908152600360205260409020805488919083908110610658576106586118a2565b906000526020600020906006020160000154036106bd576106798684611908565b6001600160a01b03861660009081526003602052604090208054839081106106a3576106a36118a2565b9060005260206000209060060201600201819055506106c5565b60010161060b565b5060408051828152602081018790526001600160a01b0386169188917fc5391d63190b7934cf128defb45873bc47a98ed41a70554734dae20fa16464f4910160405180910390a3505050505050565b6000610726600160ff87161b876118ce565b6040516323b872dd60e01b81523360048201523060248201526044810182905290915073dbf3ea6f5bee45c02255b2c26a16f300502f68da906323b872dd906064016020604051808303816000875af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906118eb565b6107c8576040516312171d8360e31b815260040160405180910390fd5b60005460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9063095ea7b3906044016020604051808303816000875af115801561082d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085191906118eb565b61086e576040516340b27c2160e11b815260040160405180910390fd5b600054604051635239af7160e01b81526001600160a01b0389811660048301526024820189905260ff8089166044840152871660648301526084820186905284151560a483015290911690635239af719060c401600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b505060408051306020820152908101869052600092506060019050604051602081830303815290604052805190602001209050886001600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008760008054906101000a90046001600160a01b03166001600160a01b03166351b17cd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d3919061191b565b6109dd9190611908565b9050600360008b6001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808481526020018581526020018381526020018b6001600160a01b031681526020018c6001600160a01b031681526020018960ff1681526020018860ff168152602001861515815260200142815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff021916908360ff16021790555060c08201518160040160156101000a81548160ff021916908360ff16021790555060e08201518160040160166101000a81548160ff02191690831515021790555061010082015181600501555050896001600160a01b0316896001600160a01b0316837fc56374a8e3361770343efe343883bf87efaeca24024afbba9062b88495f50f6e86858c8c8b604051610bdd959493929190948552602085019390935260ff91821660408501521660608301521515608082015260a00190565b60405180910390a450505050505050505050565b60036020528160005260406000208181548110610c0d57600080fd5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154939650919450926001600160a01b03918216929181169160ff600160a01b8304811692600160a81b8104821692600160b01b9091049091169089565b6000828152600160205260409020546001600160a01b031680610cda5760405162461bcd60e51b815260206004820181905260248201527f426174636820646f6573206e6f7420657869737420696e2072656769737472796044820152606401610333565b6001600160a01b0381163314610d425760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920746865206261746368206f776e65722063616e20696e63726561736044820152660ca40c8cae0e8d60cb1b6064820152608401610333565b6000806000805b6001600160a01b038516600090815260036020526040902054811015610e0c576001600160a01b0385166000908152600360205260409020805488919083908110610d9657610d966118a2565b90600052602060002090600602016000015403610e04576001600160a01b0385166000908152600360205260409020805482908110610dd757610dd76118a2565b906000526020600020906006020160040160149054906101000a900460ff16935080925060019150610e0c565b600101610d49565b5080610e655760405162461bcd60e51b815260206004820152602260248201527f4261746368206e6f7420666f756e6420696e206f776e65722773206261746368604482015261657360f01b6064820152608401610333565b8260ff168560ff1611610ecf5760405162461bcd60e51b815260206004820152602c60248201527f4e6577206465707468206d7573742062652067726561746572207468616e206360448201526b0eae4e4cadce840c8cae0e8d60a31b6064820152608401610333565b6000546040516347aab79b60e01b81526004810188905260ff871660248201526001600160a01b03909116906347aab79b90604401600060405180830381600087803b158015610f1e57600080fd5b505af1158015610f32573d6000803e3d6000fd5b50506000805460405163225f574760e11b8152600481018b90529193506001600160a01b031691506344beae8e90602401602060405180830381865afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611934565b6000805460405163df67438560e01b8152600481018b905292935090916001600160a01b039091169063df67438590602401602060405180830381865afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611017919061191b565b6001600160a01b03871660009081526003602052604090208054919250839186908110611046576110466118a2565b906000526020600020906006020160040160146101000a81548160ff021916908360ff1602179055508060036000886001600160a01b03166001600160a01b0316815260200190815260200160002085815481106110a6576110a66118a2565b906000526020600020906006020160020181905550856001600160a01b0316887ffdee0eecf77a3806c3c4424dcaa7d9c3ed2bed243cbcbe9f88696cb6639985c8848460405161110592919060ff929092168252602082015260400190565b60405180910390a35050505050505050565b6002546001600160a01b031633146111415760405162461bcd60e51b815260040161033390611951565b88600160008a815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600360008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808a8152602001898152602001888152602001876001600160a01b031681526020018b6001600160a01b031681526020018660ff1681526020018560ff168152602001841515815260200183815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff021916908360ff16021790555060c08201518160040160156101000a81548160ff021916908360ff16021790555060e08201518160040160166101000a81548160ff02191690831515021790555061010082015181600501555050886001600160a01b0316856001600160a01b0316897f048eb855e673d9441d2d3305af4e1feaf7c2e0805c372d702d88de09af80e1cb8a8a898989604051611377959493929190948552602085019390935260ff91821660408501521660608301521515608082015260a00190565b60405180910390a4505050505050505050565b6002546001600160a01b031633146113b45760405162461bcd60e51b815260040161033390611951565b6001600160a01b0381166114165760405162461bcd60e51b8152602060048201526024808201527f4e65772061646d696e2063616e6e6f7420626520746865207a65726f206164646044820152637265737360e01b6064820152608401610333565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec691015b60405180910390a15050565b6002546001600160a01b031633146114a25760405162461bcd60e51b815260040161033390611951565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f470ea4ad511ce9155b66f263468d8b2d8bb80ddc9d3fe333d69feea9b7bb496f910161146c565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b828210156115da576000848152602090819020604080516101208101825260068602909201805483526001808201548486015260028201549284019290925260038101546001600160a01b0390811660608501526004820154908116608085015260ff600160a01b8204811660a0860152600160a81b8204811660c0860152600160b01b90910416151560e0840152600501546101008301529083529092019101611534565b505050509050919050565b600080604083850312156115f857600080fd5b50508035926020909101359150565b80356001600160a01b038116811461161e57600080fd5b919050565b60ff8116811461163257600080fd5b50565b801515811461163257600080fd5b600080600080600080600060e0888a03121561165e57600080fd5b61166788611607565b965061167560208901611607565b955060408801359450606088013561168c81611623565b9350608088013561169c81611623565b925060a0880135915060c08801356116b381611635565b8091505092959891949750929550565b6000602082840312156116d557600080fd5b6116de82611607565b9392505050565b6000602082840312156116f757600080fd5b5035919050565b6000806040838503121561171157600080fd5b61171a83611607565b946020939093013593505050565b6000806040838503121561173b57600080fd5b82359150602083013561174d81611623565b809150509250929050565b60008060008060008060008060006101208a8c03121561177757600080fd5b6117808a611607565b985060208a0135975060408a0135965060608a013595506117a360808b01611607565b945060a08a01356117b381611623565b935060c08a01356117c381611623565b925060e08a01356117d381611635565b809250506101008a013590509295985092959850929598565b602080825282518282018190526000919060409081850190868401855b8281101561189557815180518552868101518786015285810151868601526060808201516001600160a01b03908116918701919091526080808301519091169086015260a08082015160ff9081169187019190915260c0808301519091169086015260e08082015115159086015261010090810151908501526101209093019290850190600101611809565b5091979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176118e5576118e56118b8565b92915050565b6000602082840312156118fd57600080fd5b81516116de81611635565b808201808211156118e5576118e56118b8565b60006020828403121561192d57600080fd5b5051919050565b60006020828403121561194657600080fd5b81516116de81611623565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b60608201526080019056fea2646970667358221220c21c40f5d7e975faf22efcccb9d368bf3fc2e71c6eb9f1a3ec4849b9a5fcaac664736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)": {
        "params": {
          "_bucketDepth": "Bucket depth",
          "_depth": "Depth of the batch",
          "_immutable": "Whether the batch is immutable",
          "_initialBalancePerChunk": "Initial balance per chunk",
          "_nodeAddress": "Address of the node that will own the batch",
          "_nonce": "Unique nonce for the batch",
          "_owner": "Address that pays for the batch, but not the owner of the batch"
        }
      },
      "getBatchPayer(bytes32)": {
        "params": {
          "_batchId": "The ID of the batch"
        },
        "returns": {
          "_0": "The address of the payer"
        }
      },
      "getOwnerBatchCount(address)": {
        "params": {
          "_owner": "The address of the owner"
        },
        "returns": {
          "_0": "The number of batches"
        }
      },
      "getOwnerBatches(address)": {
        "params": {
          "_owner": "The address of the owner"
        },
        "returns": {
          "_0": "Array of BatchInfo for the owner"
        }
      },
      "increaseBatchDepth(bytes32,uint8)": {
        "params": {
          "_batchId": "The id of the batch to increase depth",
          "_newDepth": "The new depth for the batch (must be greater than current depth)"
        }
      },
      "migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)": {
        "params": {
          "_batchId": "Batch ID from the old contract",
          "_bucketDepth": "Bucket depth from the old batch",
          "_depth": "Depth from the old batch",
          "_immutable": "Immutable flag from the old batch",
          "_nodeAddress": "Node address from the old batch",
          "_normalisedBalance": "Normalised balance from the old batch",
          "_owner": "Address that owns the batch",
          "_timestamp": "Original timestamp from the old batch",
          "_totalAmount": "Total amount from the old batch"
        }
      },
      "topUpBatch(bytes32,uint256)": {
        "params": {
          "_batchId": "The id of the batch to top up",
          "_topupAmountPerChunk": "The amount of additional tokens to add per chunk"
        }
      },
      "transferAdmin(address)": {
        "params": {
          "_newAdmin": "The address of the new admin"
        }
      },
      "updateSwarmContract(address)": {
        "params": {
          "_newSwarmContractAddress": "New address of the swarm contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Creates a new batch and registers the payer"
      },
      "getBatchPayer(bytes32)": {
        "notice": "Get the payer address for a specific batch ID"
      },
      "getOwnerBatchCount(address)": {
        "notice": "Get the number of batches for a specific owner"
      },
      "getOwnerBatches(address)": {
        "notice": "Get all batches for a specific owner"
      },
      "increaseBatchDepth(bytes32,uint8)": {
        "notice": "Increase the depth of an existing batch"
      },
      "migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)": {
        "notice": "Migrate batch data from old contract without performing token transfers"
      },
      "topUpBatch(bytes32,uint256)": {
        "notice": "Top up an existing batch"
      },
      "transferAdmin(address)": {
        "notice": "Transfer admin rights to a new address"
      },
      "updateSwarmContract(address)": {
        "notice": "Updates the swarm contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 110,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "swarmStampContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwarmContract)86"
      },
      {
        "astId": 120,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "batchPayers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 122,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 147,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "ownerBatches",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(BatchInfo)141_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BatchInfo)141_storage)dyn_storage": {
        "base": "t_struct(BatchInfo)141_storage",
        "encoding": "dynamic_array",
        "label": "struct StampsRegistry.BatchInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwarmContract)86": {
        "encoding": "inplace",
        "label": "contract ISwarmContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(BatchInfo)141_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StampsRegistry.BatchInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(BatchInfo)141_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(BatchInfo)141_storage": {
        "encoding": "inplace",
        "label": "struct StampsRegistry.BatchInfo",
        "members": [
          {
            "astId": 124,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "batchId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 126,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 128,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "normalisedBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 130,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 132,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "payer",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 134,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "depth",
            "offset": 20,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 136,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "bucketDepth",
            "offset": 21,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 138,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "immutable_",
            "offset": 22,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 140,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}