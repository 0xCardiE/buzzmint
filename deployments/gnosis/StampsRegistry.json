{
  "address": "0xabDE77b68695CD2E71A8F329f08a32baeAFa40Ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swarmContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SwarmContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BZZ_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "batchPayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "createBatchRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "getBatchPayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerBatchCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerBatches",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "batchId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalisedBalance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "bucketDepth",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "immutable_",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct StampsRegistry.BatchInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerBatches",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swarmStampContract",
      "outputs": [
        {
          "internalType": "contract ISwarmContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSwarmContractAddress",
          "type": "address"
        }
      ],
      "name": "updateSwarmContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffa397c027965da9a8907832de1facb99e0b4cf4ecf738729b291002b33d13c4",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0xabDE77b68695CD2E71A8F329f08a32baeAFa40Ef",
    "transactionIndex": 3,
    "gasUsed": "812894",
    "logsBloom": "0x
    "blockHash": "0x2adc632080da88ec4b5ca993a89b1702ac640f5524bf582c5724984ff96e9a05",
    "transactionHash": "0xffa397c027965da9a8907832de1facb99e0b4cf4ecf738729b291002b33d13c4",
    "logs": [],
    "blockNumber": 39927835,
    "cumulativeGasUsed": "1090444",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x45a1502382541Cd610CC9068e88727426b696293"
  ],
  "numDeployments": 1,
  "solcInputHash": "a44f773f45e21d187e5a380be99554f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swarmContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SwarmContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BZZ_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"batchPayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"createBatchRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerBatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerBatches\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct StampsRegistry.BatchInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swarmStampContract\",\"outputs\":[{\"internalType\":\"contract ISwarmContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwarmContractAddress\",\"type\":\"address\"}],\"name\":\"updateSwarmContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)\":{\"params\":{\"_bucketDepth\":\"Bucket depth\",\"_depth\":\"Depth of the batch\",\"_immutable\":\"Whether the batch is immutable\",\"_initialBalancePerChunk\":\"Initial balance per chunk\",\"_nodeAddress\":\"Address of the node that will own the batch\",\"_nonce\":\"Unique nonce for the batch\",\"_owner\":\"Address that pays for the batch, but not the owner of the batch\"}},\"getBatchPayer(bytes32)\":{\"params\":{\"_batchId\":\"The ID of the batch\"},\"returns\":{\"_0\":\"The address of the payer\"}},\"getOwnerBatchCount(address)\":{\"params\":{\"_owner\":\"The address of the owner\"},\"returns\":{\"_0\":\"The number of batches\"}},\"getOwnerBatches(address)\":{\"params\":{\"_owner\":\"The address of the owner\"},\"returns\":{\"_0\":\"Array of BatchInfo for the owner\"}},\"transferAdmin(address)\":{\"params\":{\"_newAdmin\":\"The address of the new admin\"}},\"updateSwarmContract(address)\":{\"params\":{\"_newSwarmContractAddress\":\"New address of the swarm contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Creates a new batch and registers the payer\"},\"getBatchPayer(bytes32)\":{\"notice\":\"Get the payer address for a specific batch ID\"},\"getOwnerBatchCount(address)\":{\"notice\":\"Get the number of batches for a specific owner\"},\"getOwnerBatches(address)\":{\"notice\":\"Get all batches for a specific owner\"},\"transferAdmin(address)\":{\"notice\":\"Transfer admin rights to a new address\"},\"updateSwarmContract(address)\":{\"notice\":\"Updates the swarm contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StampsRegistry.sol\":\"StampsRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StampsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/*\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n                                              \\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d  \\n    \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\n    \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\n*/\\n\\n/**\\n * @title StampsRegistry\\n * @notice A registry for Swarm Postage Stamps\\n * @dev Note on naming convention: The terms \\\"Batch\\\" and \\\"Stamps\\\" are used interchangeably throughout the codebase.\\n *      \\\"Batch\\\" refers to a collection of stamps created in a single transaction and is the terminology used in the\\n *      Swarm protocol. \\\"Stamps\\\" is a more user-friendly term used to describe the same concept.\\n *      For example: \\\"BatchCreated\\\" event, but \\\"StampsRegistry\\\" contract.\\n */\\n\\ninterface ISwarmContract {\\n    function createBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external;\\n\\n    function currentTotalOutPayment() external view returns (uint256);\\n}\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ncontract StampsRegistry {\\n    // State variables\\n    ISwarmContract public swarmStampContract;\\n    IERC20 public constant BZZ_TOKEN =\\n        IERC20(0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da);\\n    mapping(bytes32 => address) public batchPayers;\\n    address public admin;\\n    \\n    // New data structure to store batch information by owner\\n    struct BatchInfo {\\n        bytes32 batchId;\\n        uint256 totalAmount;\\n        uint256 normalisedBalance;\\n        address nodeAddress;\\n        address payer;\\n        uint8 depth;\\n        uint8 bucketDepth;\\n        bool immutable_;\\n        uint256 timestamp;\\n    }\\n    \\n    // Mapping from owner address to array of BatchInfo\\n    mapping(address => BatchInfo[]) public ownerBatches;\\n    \\n    // Events\\n    event BatchCreated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address indexed owner,\\n        address indexed payer,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutable_\\n    );\\n    event SwarmContractUpdated(address oldAddress, address newAddress);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    // Custom errors\\n    error TransferFailed();\\n    error ApprovalFailed();\\n\\n    // Modifiers\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(address _swarmContractAddress) {\\n        swarmStampContract = ISwarmContract(_swarmContractAddress);\\n        admin = msg.sender;\\n    }\\n\\n    ////////////////////////////////////////\\n    //              SETTERS               //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Transfer admin rights to a new address\\n     * @param _newAdmin The address of the new admin\\n     */\\n    function transferAdmin(address _newAdmin) external onlyAdmin {\\n        require(_newAdmin != address(0), \\\"New admin cannot be the zero address\\\");\\n        address oldAdmin = admin;\\n        admin = _newAdmin;\\n        emit AdminTransferred(oldAdmin, _newAdmin);\\n    }\\n\\n    /**\\n     * @notice Updates the swarm contract address\\n     * @param _newSwarmContractAddress New address of the swarm contract\\n     */\\n    function updateSwarmContract(\\n        address _newSwarmContractAddress\\n    ) external onlyAdmin {\\n        address oldAddress = address(swarmStampContract);\\n        swarmStampContract = ISwarmContract(_newSwarmContractAddress);\\n        emit SwarmContractUpdated(oldAddress, _newSwarmContractAddress);\\n    }\\n\\n    /**\\n     * @notice Creates a new batch and registers the payer\\n     * @param _owner Address that pays for the batch, but not the owner of the batch\\n     * @param _nodeAddress Address of the node that will own the batch\\n     * @param _initialBalancePerChunk Initial balance per chunk\\n     * @param _depth Depth of the batch\\n     * @param _bucketDepth Bucket depth\\n     * @param _nonce Unique nonce for the batch\\n     * @param _immutable Whether the batch is immutable\\n     */\\n    function createBatchRegistry(\\n        address _owner,\\n        address _nodeAddress,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external {\\n        // Calculate total amount\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n\\n        // Transfer BZZ tokens from sender to this contract\\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        // Approve swarmStampContract to spend the BZZ tokens\\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\\n            revert ApprovalFailed();\\n        }\\n\\n        // Call the original swarm contract with nodeAddress as owner\\n        swarmStampContract.createBatch(\\n            _nodeAddress,\\n            _initialBalancePerChunk,\\n            _depth,\\n            _bucketDepth,\\n            _nonce,\\n            _immutable\\n        );\\n\\n        // Calculate batchId as bytes32\\n        bytes32 batchId = keccak256(abi.encode(address(this), _nonce));\\n\\n        // Store the payer information\\n        batchPayers[batchId] = _owner;\\n\\n        // Get normalized balance\\n        uint256 normalisedBalance = swarmStampContract\\n            .currentTotalOutPayment() + _initialBalancePerChunk;\\n            \\n        // Store batch information in the owner's batches array\\n        ownerBatches[_owner].push(BatchInfo({\\n            batchId: batchId,\\n            totalAmount: totalAmount,\\n            normalisedBalance: normalisedBalance,\\n            nodeAddress: _nodeAddress,\\n            payer: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutable_: _immutable,\\n            timestamp: block.timestamp\\n        }));\\n\\n        // Emit the batch creation event\\n        emit BatchCreated(\\n            batchId,\\n            totalAmount,\\n            normalisedBalance,\\n            _nodeAddress,\\n            _owner,\\n            _depth,\\n            _bucketDepth,\\n            _immutable\\n        );\\n    }\\n\\n    ////////////////////////////////////////\\n    //              GETTERS               //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Get the payer address for a specific batch ID\\n     * @param _batchId The ID of the batch\\n     * @return The address of the payer\\n     */\\n    function getBatchPayer(bytes32 _batchId) external view returns (address) {\\n        return batchPayers[_batchId];\\n    }\\n    \\n    /**\\n     * @notice Get all batches for a specific owner\\n     * @param _owner The address of the owner\\n     * @return Array of BatchInfo for the owner\\n     */\\n    function getOwnerBatches(address _owner) external view returns (BatchInfo[] memory) {\\n        return ownerBatches[_owner];\\n    }\\n    \\n    /**\\n     * @notice Get the number of batches for a specific owner\\n     * @param _owner The address of the owner\\n     * @return The number of batches\\n     */\\n    function getOwnerBatchCount(address _owner) external view returns (uint256) {\\n        return ownerBatches[_owner].length;\\n    }\\n}\\n\",\"keccak256\":\"0x53d366935f2fecb59fbdfea062d5a48218fd21ffc855a339401666628395b4ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d81380380610d8183398101604081905261002f9161005d565b600080546001600160a01b039092166001600160a01b0319928316179055600280549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b610ce58061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063883134941161007157806388313494146101bb578063ae268816146101ce578063b0099620146101e1578063e1e1edfc1461020a578063f851a44014610225578063fa031f841461023857600080fd5b80632ff190d6146100ae578063302fb0ca146100c357806335f7447b146100ff5780635e9b3ac11461014057806375829def146101a8575b600080fd5b6100c16100bc366004610a5b565b610258565b005b6100ec6100d1366004610ad7565b6001600160a01b031660009081526003602052604090205490565b6040519081526020015b60405180910390f35b61012861010d366004610af9565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100f6565b61015361014e366004610b12565b610735565b60408051998a5260208a0198909852968801959095526001600160a01b03938416606088015292909116608086015260ff90811660a08601521660c0840152151560e0830152610100820152610120016100f6565b6100c16101b6366004610ad7565b6107b9565b600054610128906001600160a01b031681565b6100c16101dc366004610ad7565b6108b0565b6101286101ef366004610af9565b6000908152600160205260409020546001600160a01b031690565b61012873dbf3ea6f5bee45c02255b2c26a16f300502f68da81565b600254610128906001600160a01b031681565b61024b610246366004610ad7565b610934565b6040516100f69190610b3c565b600061026a600160ff87161b87610c08565b6040516323b872dd60e01b81523360048201523060248201526044810182905290915073dbf3ea6f5bee45c02255b2c26a16f300502f68da906323b872dd906064016020604051808303816000875af11580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610c25565b61030c576040516312171d8360e31b815260040160405180910390fd5b60005460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9063095ea7b3906044016020604051808303816000875af1158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610c25565b6103b2576040516340b27c2160e11b815260040160405180910390fd5b600054604051635239af7160e01b81526001600160a01b0389811660048301526024820189905260ff8089166044840152871660648301526084820186905284151560a483015290911690635239af719060c401600060405180830381600087803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b505060408051306020820152908101869052600092506060019050604051602081830303815290604052805190602001209050886001600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008760008054906101000a90046001600160a01b03166001600160a01b03166351b17cd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190610c42565b6105219190610c5b565b9050600360008b6001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808481526020018581526020018381526020018b6001600160a01b031681526020018c6001600160a01b031681526020018960ff1681526020018860ff168152602001861515815260200142815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff021916908360ff16021790555060c08201518160040160156101000a81548160ff021916908360ff16021790555060e08201518160040160166101000a81548160ff02191690831515021790555061010082015181600501555050896001600160a01b0316896001600160a01b0316837fc56374a8e3361770343efe343883bf87efaeca24024afbba9062b88495f50f6e86858c8c8b604051610721959493929190948552602085019390935260ff91821660408501521660608301521515608082015260a00190565b60405180910390a450505050505050505050565b6003602052816000526040600020818154811061075157600080fd5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154939650919450926001600160a01b03918216929181169160ff600160a01b8304811692600160a81b8104821692600160b01b9091049091169089565b6002546001600160a01b031633146107ec5760405162461bcd60e51b81526004016107e390610c6e565b60405180910390fd5b6001600160a01b03811661084e5760405162461bcd60e51b8152602060048201526024808201527f4e65772061646d696e2063616e6e6f7420626520746865207a65726f206164646044820152637265737360e01b60648201526084016107e3565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec691015b60405180910390a15050565b6002546001600160a01b031633146108da5760405162461bcd60e51b81526004016107e390610c6e565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f470ea4ad511ce9155b66f263468d8b2d8bb80ddc9d3fe333d69feea9b7bb496f91016108a4565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610a12576000848152602090819020604080516101208101825260068602909201805483526001808201548486015260028201549284019290925260038101546001600160a01b0390811660608501526004820154908116608085015260ff600160a01b8204811660a0860152600160a81b8204811660c0860152600160b01b90910416151560e084015260050154610100830152908352909201910161096c565b505050509050919050565b80356001600160a01b0381168114610a3457600080fd5b919050565b803560ff81168114610a3457600080fd5b8015158114610a5857600080fd5b50565b600080600080600080600060e0888a031215610a7657600080fd5b610a7f88610a1d565b9650610a8d60208901610a1d565b955060408801359450610aa260608901610a39565b9350610ab060808901610a39565b925060a0880135915060c0880135610ac781610a4a565b8091505092959891949750929550565b600060208284031215610ae957600080fd5b610af282610a1d565b9392505050565b600060208284031215610b0b57600080fd5b5035919050565b60008060408385031215610b2557600080fd5b610b2e83610a1d565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015610be557815180518552868101518786015285810151868601526060808201516001600160a01b03908116918701919091526080808301519091169086015260a08082015160ff9081169187019190915260c0808301519091169086015260e08082015115159086015261010090810151908501526101209093019290850190600101610b59565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1f57610c1f610bf2565b92915050565b600060208284031215610c3757600080fd5b8151610af281610a4a565b600060208284031215610c5457600080fd5b5051919050565b80820180821115610c1f57610c1f610bf2565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b60608201526080019056fea264697066735822122083ad9df7dd24117be28e79595001ebe2fa34676640e9baf9c417f625dc4c310d64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063883134941161007157806388313494146101bb578063ae268816146101ce578063b0099620146101e1578063e1e1edfc1461020a578063f851a44014610225578063fa031f841461023857600080fd5b80632ff190d6146100ae578063302fb0ca146100c357806335f7447b146100ff5780635e9b3ac11461014057806375829def146101a8575b600080fd5b6100c16100bc366004610a5b565b610258565b005b6100ec6100d1366004610ad7565b6001600160a01b031660009081526003602052604090205490565b6040519081526020015b60405180910390f35b61012861010d366004610af9565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100f6565b61015361014e366004610b12565b610735565b60408051998a5260208a0198909852968801959095526001600160a01b03938416606088015292909116608086015260ff90811660a08601521660c0840152151560e0830152610100820152610120016100f6565b6100c16101b6366004610ad7565b6107b9565b600054610128906001600160a01b031681565b6100c16101dc366004610ad7565b6108b0565b6101286101ef366004610af9565b6000908152600160205260409020546001600160a01b031690565b61012873dbf3ea6f5bee45c02255b2c26a16f300502f68da81565b600254610128906001600160a01b031681565b61024b610246366004610ad7565b610934565b6040516100f69190610b3c565b600061026a600160ff87161b87610c08565b6040516323b872dd60e01b81523360048201523060248201526044810182905290915073dbf3ea6f5bee45c02255b2c26a16f300502f68da906323b872dd906064016020604051808303816000875af11580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610c25565b61030c576040516312171d8360e31b815260040160405180910390fd5b60005460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9063095ea7b3906044016020604051808303816000875af1158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610c25565b6103b2576040516340b27c2160e11b815260040160405180910390fd5b600054604051635239af7160e01b81526001600160a01b0389811660048301526024820189905260ff8089166044840152871660648301526084820186905284151560a483015290911690635239af719060c401600060405180830381600087803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b505060408051306020820152908101869052600092506060019050604051602081830303815290604052805190602001209050886001600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008760008054906101000a90046001600160a01b03166001600160a01b03166351b17cd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190610c42565b6105219190610c5b565b9050600360008b6001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808481526020018581526020018381526020018b6001600160a01b031681526020018c6001600160a01b031681526020018960ff1681526020018860ff168152602001861515815260200142815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff021916908360ff16021790555060c08201518160040160156101000a81548160ff021916908360ff16021790555060e08201518160040160166101000a81548160ff02191690831515021790555061010082015181600501555050896001600160a01b0316896001600160a01b0316837fc56374a8e3361770343efe343883bf87efaeca24024afbba9062b88495f50f6e86858c8c8b604051610721959493929190948552602085019390935260ff91821660408501521660608301521515608082015260a00190565b60405180910390a450505050505050505050565b6003602052816000526040600020818154811061075157600080fd5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154939650919450926001600160a01b03918216929181169160ff600160a01b8304811692600160a81b8104821692600160b01b9091049091169089565b6002546001600160a01b031633146107ec5760405162461bcd60e51b81526004016107e390610c6e565b60405180910390fd5b6001600160a01b03811661084e5760405162461bcd60e51b8152602060048201526024808201527f4e65772061646d696e2063616e6e6f7420626520746865207a65726f206164646044820152637265737360e01b60648201526084016107e3565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec691015b60405180910390a15050565b6002546001600160a01b031633146108da5760405162461bcd60e51b81526004016107e390610c6e565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f470ea4ad511ce9155b66f263468d8b2d8bb80ddc9d3fe333d69feea9b7bb496f91016108a4565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610a12576000848152602090819020604080516101208101825260068602909201805483526001808201548486015260028201549284019290925260038101546001600160a01b0390811660608501526004820154908116608085015260ff600160a01b8204811660a0860152600160a81b8204811660c0860152600160b01b90910416151560e084015260050154610100830152908352909201910161096c565b505050509050919050565b80356001600160a01b0381168114610a3457600080fd5b919050565b803560ff81168114610a3457600080fd5b8015158114610a5857600080fd5b50565b600080600080600080600060e0888a031215610a7657600080fd5b610a7f88610a1d565b9650610a8d60208901610a1d565b955060408801359450610aa260608901610a39565b9350610ab060808901610a39565b925060a0880135915060c0880135610ac781610a4a565b8091505092959891949750929550565b600060208284031215610ae957600080fd5b610af282610a1d565b9392505050565b600060208284031215610b0b57600080fd5b5035919050565b60008060408385031215610b2557600080fd5b610b2e83610a1d565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015610be557815180518552868101518786015285810151868601526060808201516001600160a01b03908116918701919091526080808301519091169086015260a08082015160ff9081169187019190915260c0808301519091169086015260e08082015115159086015261010090810151908501526101209093019290850190600101610b59565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1f57610c1f610bf2565b92915050565b600060208284031215610c3757600080fd5b8151610af281610a4a565b600060208284031215610c5457600080fd5b5051919050565b80820180821115610c1f57610c1f610bf2565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b60608201526080019056fea264697066735822122083ad9df7dd24117be28e79595001ebe2fa34676640e9baf9c417f625dc4c310d64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)": {
        "params": {
          "_bucketDepth": "Bucket depth",
          "_depth": "Depth of the batch",
          "_immutable": "Whether the batch is immutable",
          "_initialBalancePerChunk": "Initial balance per chunk",
          "_nodeAddress": "Address of the node that will own the batch",
          "_nonce": "Unique nonce for the batch",
          "_owner": "Address that pays for the batch, but not the owner of the batch"
        }
      },
      "getBatchPayer(bytes32)": {
        "params": {
          "_batchId": "The ID of the batch"
        },
        "returns": {
          "_0": "The address of the payer"
        }
      },
      "getOwnerBatchCount(address)": {
        "params": {
          "_owner": "The address of the owner"
        },
        "returns": {
          "_0": "The number of batches"
        }
      },
      "getOwnerBatches(address)": {
        "params": {
          "_owner": "The address of the owner"
        },
        "returns": {
          "_0": "Array of BatchInfo for the owner"
        }
      },
      "transferAdmin(address)": {
        "params": {
          "_newAdmin": "The address of the new admin"
        }
      },
      "updateSwarmContract(address)": {
        "params": {
          "_newSwarmContractAddress": "New address of the swarm contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Creates a new batch and registers the payer"
      },
      "getBatchPayer(bytes32)": {
        "notice": "Get the payer address for a specific batch ID"
      },
      "getOwnerBatchCount(address)": {
        "notice": "Get the number of batches for a specific owner"
      },
      "getOwnerBatches(address)": {
        "notice": "Get all batches for a specific owner"
      },
      "transferAdmin(address)": {
        "notice": "Transfer admin rights to a new address"
      },
      "updateSwarmContract(address)": {
        "notice": "Updates the swarm contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 47,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "swarmStampContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwarmContract)23"
      },
      {
        "astId": 57,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "batchPayers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 59,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 84,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "ownerBatches",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(BatchInfo)78_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BatchInfo)78_storage)dyn_storage": {
        "base": "t_struct(BatchInfo)78_storage",
        "encoding": "dynamic_array",
        "label": "struct StampsRegistry.BatchInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwarmContract)23": {
        "encoding": "inplace",
        "label": "contract ISwarmContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(BatchInfo)78_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StampsRegistry.BatchInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(BatchInfo)78_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(BatchInfo)78_storage": {
        "encoding": "inplace",
        "label": "struct StampsRegistry.BatchInfo",
        "members": [
          {
            "astId": 61,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "batchId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 63,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 65,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "normalisedBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 67,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 69,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "payer",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 71,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "depth",
            "offset": 20,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 73,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "bucketDepth",
            "offset": 21,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 75,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "immutable_",
            "offset": 22,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 77,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}